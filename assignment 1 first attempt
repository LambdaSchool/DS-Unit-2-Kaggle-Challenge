{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled5.ipynb",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/dunkelweizen/DS-Unit-2-Kaggle-Challenge/blob/master/assignment%201%20first%20attempt\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9AtbJfYAK_xz",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 755
        },
        "outputId": "58ca7653-a43a-4a2b-d38f-f2d8ad3ad294"
      },
      "source": [
        "# -*- coding: utf-8 -*-\n",
        "\"\"\"\n",
        "Created on Wed Nov 13 20:59:41 2019\n",
        "\n",
        "@author: caino\n",
        "\"\"\"\n",
        "!pip install category_encoders==2.*\n",
        "#%% import libraries\n",
        "import sys\n",
        "import pandas as pd\n",
        "import category_encoders as ce\n",
        "from sklearn.model_selection import train_test_split\n",
        "import pandas_profiling\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import plotly.express as px\n",
        "\n",
        "#%%importing data\n",
        "train = pd.merge(pd.read_csv('/content/train_features.csv'), \n",
        "                 pd.read_csv('/content/train_labels.csv'))\n",
        "test = pd.read_csv('/content/test_features.csv')\n",
        "sample_submission = pd.read_csv('/content/sample_submission.csv')\n",
        "\n",
        "#%%splitting data into train, test, and validate\n",
        "train, val = train_test_split(train, train_size=0.80, test_size=0.20, \n",
        "                              stratify=train['status_group'], random_state=42)\n",
        "#%%creating baseline SWAG\n",
        "print(train['status_group'].value_counts(normalize=True))\n",
        "baseline_guess = 'functional'\n",
        "\n",
        "#%% feature exploration and cleaning data\n",
        "print(train.columns)\n",
        "\n",
        "print(train['longitude'].min())\n",
        "train['longitude'] = train['longitude'].replace(0, train['longitude'].mean())\n",
        "train['latitude'] = train['latitude'].replace(0, train['latitude'].mean())\n",
        "train['construction_year'] = train['construction_year'].replace(0, 2010)\n",
        "#train = train.fillna('unknown')\n",
        "train['functional'] = (train['status_group']=='functional').astype(int)\n",
        "\n",
        "most_likely_features = ['amount_tsh', 'gps_height', 'construction_year', 'population',\n",
        "                        'extraction_type', 'quantity',\n",
        "                        'source', 'latitude', 'longitude']\n",
        "#%% one-hot encoding\n",
        "X_train = train[most_likely_features]\n",
        "X_val = val[most_likely_features]\n",
        "\n",
        "#encoder = ce.OneHotEncoder(use_cat_names=True)\n",
        "#X_train = encoder.fit_transform(X_train)\n",
        "#X_val = encoder.transform(X_val)\n",
        "\n",
        "#%% make pipeline\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.pipeline import make_pipeline\n",
        "\n",
        "target = 'status_group'\n",
        "train_features = train.drop(columns=[target, 'id'])\n",
        "y_train = train[target]\n",
        "y_val = val[target]\n",
        "\n",
        "pipeline = make_pipeline(\n",
        "   ce.OneHotEncoder(use_cat_names=True),\n",
        "   SimpleImputer(strategy='mean'),\n",
        "   DecisionTreeClassifier()\n",
        ")\n",
        "pipeline.fit(X_train, y_train)\n",
        "\n",
        "#encoder = ce.OneHotEncoder(use_cat_names=True)\n",
        "#X_train = encoder.fit_transform(X_train)\n",
        "#X_val = encoder.transform(X_val)\n",
        "\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "model = solver='lbfgs'\n",
        "model.fit(X_train, y_train)\n",
        "print('Training Accuracy', pipeline.score(X_train, y_train))\n",
        "print('Validation Accuracy', pipeline.score(X_val, y_val))\n",
        "\n",
        "#%%\n"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: category_encoders==2.* in /usr/local/lib/python3.6/dist-packages (2.1.0)\n",
            "Requirement already satisfied: numpy>=1.11.3 in /usr/local/lib/python3.6/dist-packages (from category_encoders==2.*) (1.17.4)\n",
            "Requirement already satisfied: scikit-learn>=0.20.0 in /usr/local/lib/python3.6/dist-packages (from category_encoders==2.*) (0.21.3)\n",
            "Requirement already satisfied: statsmodels>=0.6.1 in /usr/local/lib/python3.6/dist-packages (from category_encoders==2.*) (0.10.1)\n",
            "Requirement already satisfied: pandas>=0.21.1 in /usr/local/lib/python3.6/dist-packages (from category_encoders==2.*) (0.25.3)\n",
            "Requirement already satisfied: patsy>=0.4.1 in /usr/local/lib/python3.6/dist-packages (from category_encoders==2.*) (0.5.1)\n",
            "Requirement already satisfied: scipy>=0.19.0 in /usr/local/lib/python3.6/dist-packages (from category_encoders==2.*) (1.3.2)\n",
            "Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.6/dist-packages (from scikit-learn>=0.20.0->category_encoders==2.*) (0.14.0)\n",
            "Requirement already satisfied: python-dateutil>=2.6.1 in /usr/local/lib/python3.6/dist-packages (from pandas>=0.21.1->category_encoders==2.*) (2.6.1)\n",
            "Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.6/dist-packages (from pandas>=0.21.1->category_encoders==2.*) (2018.9)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from patsy>=0.4.1->category_encoders==2.*) (1.12.0)\n",
            "functional                 0.543077\n",
            "non functional             0.384238\n",
            "functional needs repair    0.072685\n",
            "Name: status_group, dtype: float64\n",
            "Index(['id', 'amount_tsh', 'date_recorded', 'funder', 'gps_height',\n",
            "       'installer', 'longitude', 'latitude', 'wpt_name', 'num_private',\n",
            "       'basin', 'subvillage', 'region', 'region_code', 'district_code', 'lga',\n",
            "       'ward', 'population', 'public_meeting', 'recorded_by',\n",
            "       'scheme_management', 'scheme_name', 'permit', 'construction_year',\n",
            "       'extraction_type', 'extraction_type_group', 'extraction_type_class',\n",
            "       'management', 'management_group', 'payment', 'payment_type',\n",
            "       'water_quality', 'quality_group', 'quantity', 'quantity_group',\n",
            "       'source', 'source_type', 'source_class', 'waterpoint_type',\n",
            "       'waterpoint_type_group', 'status_group'],\n",
            "      dtype='object')\n",
            "0.0\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-3-048629048600>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     72\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinear_model\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mLogisticRegression\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     73\u001b[0m \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mLogisticRegression\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 74\u001b[0;31m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     75\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Training Accuracy'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpipeline\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscore\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     76\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Validation Accuracy'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpipeline\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscore\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_val\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_val\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTypeError\u001b[0m: fit() missing 1 required positional argument: 'y'"
          ]
        }
      ]
    }
  ]
}